Геосервис, принимающий запросы на нахождение маршрутов,
реализованный на Python как wsgi приложение.

ТРЕБОВАНИЯ
ОС Ubuntu 14.04
Веб-сервер Apache 2.4
Python 2.7.xx - обычно уже установлен в системе

СОСТАВ
	каталог html - frontend, веб приложение для тестирования и визуализации
	каталог wsgi_app - сам сервис приложения

УСТАНОВКА
	- mod_wsgi
		  sudo apt-get install -y libapache2-mod-wsgi
		  sudo a2enmod, вводим wsgi
		  sudo service apache2 restart
	- spatialite
		  sudo apt-get install python-pyspatialite
	

НАСТРОЙКА
	- настройка виртуального хоста
		  в каталоге /etc/apache2/sites-enabled создаем файл конфигурации для виртуального хоста,
		  например py_spa.conf. Расширение "conf" обязательно.
		  Пример содержания этого файла у меня:
		  
		  	<VirtualHost *:80>

				ServerName py_spa.loc
				ServerAdmin webmaster@example.com

				DocumentRoot /home/user1/www/geoservice_python/html
				ErrorLog ${APACHE_LOG_DIR}/error.log
				<Directory /home/user1/www/geoservice_python/html>
				Order allow,deny
				Allow from all
				</Directory>

				WSGIScriptAlias /route /home/user1/www/geoservice_python/wsgi_app/route.wsgi
				WSGIScriptAlias /nearest /home/user1/www/geoservice_python/wsgi_app/nearest.wsgi
				WSGIDaemonProcess py_spa.loc processes=2 threads=15 display-name=%{GROUP}
				WSGIProcessGroup py_spa.loc

			</VirtualHost>
			
			Директива  DocumentRoot /home/user1/www/geoservice_python/html должна указывать на каталог html
			
			В директиве WSGIScriptAlias /route /home/user1/www/geoservice_python/wsgi_app/route.wsgi
			указывается URL при обращении по которому Apache будет вызывать wsgi приложение и путь к этому приложению
			Таких директив может быть не одна.
			
		перезапускаем веб-сервер	sudo service apache2 restart
		для обращения к веб приложению через браузер добавляем в /etc/hosts строку 127.0.0.1	py_spa.loc
		
ИСПОЛЬЗОВАНИЕ
	В файлах route.wsgi и nearest.wsgi  переменной DB_DIR присваиваем путь до каталога с базами данных SQLite(spatialite), в которых
	содержатся графы дорожных сетей.
	
	Открываем в браузере адрес указанный в ServerName, например, в моем случае http://py_spa.loc
	Откроется веб-приложение. Интерфейс состоит из карты, выпадающего списка с регионами, радио-кнопкой
	"маршрутизация, ближайший узел", поля в которое выводится время выполнения запроса.
	При первом клике ставится маркер, при втором ставится второй маркер и отображается маршрут. При третьем клике
	возвращение в исходное. При перетаскивании маркера - перепостроение маршрута.
	При переключении на "ближайший узел" ставится маркер в месте клика и в месте расположения ближайшего узла графа дорожной сети.
	
API
	Запрос на поиск маршрута
		GET
		http://server.name/route?data=lat_source,lng_source,lat_target,lng_target,db_filename
		
		Пример: http://py_spa.loc/route?data=56.62,47.728765,55.83,48.36,RU-ME.osm.sqlite

		Пример ответа(сокращен): {"type":"LineString","coordinates":[[47.7301384,56.6167473],
		[47.73038019999999,56.6162736],[47.731074,56.61590629999999],[47.73520959999999,56.61613409999999]...]}
	
	Запрос на поиск ближайшего узла
		GET
		http://server.name/nearest?data=lat_point,lng_point,db_filename
		
		Пример: http://py_spa.loc/nearest?data=56.62,47.728765,RU-ME.osm.sqlite
		
		Пример ответа: {"type":"Point","coordinates":[47.7301384,56.6167473]}
		
Дополнения:
	В связи с добавлением поддержки сетки в запросы в конце должен быть добавлен еще параметр "scale".
	Величина scale равна 2**m, где m - параметр m в команде start_mkgrid.py
	
	т.е. если
	./start_mkgrid.py -u -d /home/user1/game1/db -m 2
	
	то:
	http://server.name/route?data=lat_source,lng_source,lat_target,lng_target,db_filename,4
	http://server.name/nearest?data=lat_point,lng_point,db_filename,4
	
	
		
		
	
	
